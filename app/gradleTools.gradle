import javax.crypto.Cipher
import javax.crypto.SecretKeyFactory
import javax.crypto.spec.DESKeySpec
import java.nio.charset.StandardCharsets
import java.security.SecureRandom
final String SECURITY_KEY = "bdc813355a2bf0706f9d4ec165c2ae11"
final String SECURITY_IV = "VNnJ1YQnpbyuKBIb"
// 统一获取内容格式
static String appendContent(String content) {
    return '"' + content + '"'
}

// 加密key和appid等
public String encrypt(String content) {
    return '"' + des(content, mainSingleCfg.desKey, Cipher.ENCRYPT_MODE) + '"'
}
// 加解密
static String des(String content, String password, int type) {
    try {
        SecureRandom random = new SecureRandom()
        DESKeySpec desKey = new DESKeySpec(password.getBytes())
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES")
        Cipher cipher = Cipher.getInstance("DES")
        cipher.init(type, keyFactory.generateSecret(desKey), random)

        if (type == Cipher.ENCRYPT_MODE) {
            byte[] byteContent = content.getBytes(StandardCharsets.UTF_8)
            return parseByte2HexStr(cipher.doFinal(byteContent))
        } else {
            byte[] byteContent = parseHexStr2Byte(content)
            assert byteContent != null
            return new String(cipher.doFinal(byteContent))
        }
    } catch (Exception e) {
        throw e
    }
}

// 将二进制转换成16进制
static String parseByte2HexStr(byte[] buf) {
    StringBuffer sb = new StringBuffer()
    for (int i = 0; i < buf.length; i++) {
        String hex = Integer.toHexString(buf[i] & 0xFF)
        if (hex.length() == 1) {
            hex = '0' + hex
        }
        sb.append(hex.toUpperCase())
    }
    return sb.toString()
}

// 将16进制转换为二进制
static byte[] parseHexStr2Byte(String hexStr) {
    if (hexStr.length() < 1)
        return null;
    byte[] result = new byte[hexStr.length() / 2];
    for (int i = 0; i < hexStr.length() / 2; i++) {
        int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);
        int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2),
                16);
        result[i] = (byte) (high * 16 + low);
    }
    return result;
}
